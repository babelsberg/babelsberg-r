fails:->(){} uses lambda's 'rigid' argument handling
fails:"A lambda literal -> () { } assigns variables from parameters for definition \n    @a = -> (**) {  }\n"
fails:"A lambda literal -> () { } assigns variables from parameters for definition \n    @a = -> (*, &b) { b }\n"
fails:"A lambda literal -> () { } assigns variables from parameters for definition \n    @a = -> (a:, b: 1) { [a, b] }\n"
fails:"A lambda literal -> () { } assigns variables from parameters for definition \n    @a = -> (a, b=1, *c, (*d, (e)), f: 2, g:, h:, **k, &l) do\n      [a, b, c, d, e, f, g, h, k, l]\n    end\n"
fails:"A lambda literal -> () { } assigns variables from parameters for definition \n    @a = -> a, b=1, *c, d, e:, f: 2, g:, **k, &l do\n      [a, b, c, d, e, f, g, k, l]\n    end\n"
fails:A lambda literal -> () { } assigns variables from parameters with circular optional argument reference shadows an existing method with the same name as the argument
fails:"A lambda expression 'lambda { ... }' assigns variables from parameters for definition \n    @a = lambda { |a, | a }\n"
fails:"A lambda expression 'lambda { ... }' assigns variables from parameters for definition \n    @a = lambda { |**|  }\n"
fails:"A lambda expression 'lambda { ... }' assigns variables from parameters for definition \n    @a = lambda { |*, &b| b }\n"
fails:"A lambda expression 'lambda { ... }' assigns variables from parameters for definition \n    @a = lambda { |a:, b: 1| [a, b] }\n"
fails:"A lambda expression 'lambda { ... }' assigns variables from parameters for definition \n    @a = lambda do |a, b=1, *c, (*d, (e)), f: 2, g:, h:, **k, &l|\n      [a, b, c, d, e, f, g, h, k, l]\n    end\n"
fails:"A lambda expression 'lambda { ... }' assigns variables from parameters for definition \n    @a = lambda do |a, b=1, *c, d, e:, f: 2, g:, **k, &l|\n      [a, b, c, d, e, f, g, k, l]\n    end\n"
